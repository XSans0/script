#!/usr/bin/env bash
# Copyright ©2021 - 2022 XSans02
# Docker Kernel Build Script

# Installing some dep
apt-get install cpio libtinfo5

# Cloning kernel resource
git clone --depth=1 https://"${TOKED}":x-oauth-basic@github.com/XSans02/kernel_xiaomi_vayu -b ${K_BRANCH} kernel
DEFCONFIG=vayu_defconfig
cd kernel || exit

# Release Type
if [[ "${RELEASE}" == "beta" ]]; then
  TYPE=Nightly
  export LOCALVERSION=-"$TYPE"
else
  TYPE=Stable
fi

# Clone some ingredient for azure
if [[ "${TC}" == "azure" ]]; then
  HOME=$(pwd)
  curl -fsSL "https://repo.archlinuxcn.org/x86_64/glibc-linux4-2.33-4-x86_64.pkg.tar.zst" | bsdtar -C / -xvf - &>/dev/null
  pacman -Syu --needed --noconfirm wget base-devel xmlto inetutils bc bison cpio git zip python2 &>/dev/null
  cd "$HOME"
fi

# Cloning toolchains resource
# Setup using ENV
if [[ "${TC}" =~ "aosp" ]]; then
  mkdir clang
  wget -q https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/master/clang-r445002.tar.gz "clang-r445002.tar.gz"
  tar -xf clang-r445002.tar.gz -C $(pwd)/clang
  rm -rf clang-r445002.tar.gz
elif [[ "${TC}" =~ "azure" ]]; then
  git clone --depth=1 https://gitlab.com/Panchajanya1999/azure-clang clang
elif [[ "${TC}" =~ "proton" ]]; then
  git clone --depth=1 https://github.com/kdrag0n/proton-clang clang
elif [[ "${TC}" =~ "clang15" ]]; then
  git clone --depth=1 https://github.com/XSans02/Weeb-Clang clang
elif [[ "${TC}" =~ "clang14" ]]; then
  git clone --depth=1 https://github.com/XSans02/XSansTC-Clang -b 14 clang
elif [[ "${TC}" =~ "gcc10" ]]; then
  git clone --depth=1 https://github.com/sohamxda7/llvm-stable -b gcc64 arm64
  git clone --depth=1 https://github.com/sohamxda7/llvm-stable -b gcc32 arm32
elif [[ "${TC}" =~ "gcc12" ]]; then
  git clone --depth=1 https://github.com/mvaisakh/gcc-arm64 -b gcc-master arm64
  git clone --depth=1 https://github.com/mvaisakh/gcc-arm -b gcc-master arm32
fi

git clone --depth=1 https://github.com/XSans02/AnyKernel3 -b vayu ak3

# Setup environtment
KERNEL_DIR="$PWD"
KERNEL_IMG="$KERNEL_DIR/out/arch/arm64/boot/Image"
KERNEL_DTBO="$KERNEL_DIR/out/arch/arm64/boot/dtbo.img"
KERNEL_DTB="$KERNEL_DIR/out/arch/arm64/boot/dts/qcom"
AK3_DIR="$KERNEL_DIR/ak3/"
DEVICE="vayu"
CLANG_DIR="$KERNEL_DIR/clang"
GCC_DIR="$KERNEL_DIR/arm64"
PrefixDir="$CLANG_DIR/bin/"
ZIP_DATE="$(TZ=Asia/Jakarta date +'%d%m%Y')"
ZIP_DATE2="$(date +"%H%M")"
BRANCH="$(git rev-parse --abbrev-ref HEAD)"
COMMIT="$(git log --pretty=format:'%s' -1)"
CORES=$(grep -c ^processor /proc/cpuinfo)
CPU=$(lscpu | sed -nr '/Model name/ s/.*:\s*(.*) */\1/p')

# Export
export ARCH="arm64"
export SUBARCH="arm64"
export KBUILD_BUILD_USER="XSansツ"
export KBUILD_BUILD_HOST="Github-Server"
export PATH="$KERNEL_DIR/clang/bin:$PATH"
export KBUILD_COMPILER_STRING="$("$CLANG_DIR"/bin/clang --version | head -n 1 | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')"

# Telegram Setup
send_msg() {
    curl -s -X POST \
        https://api.telegram.org/bot"{$TELEGRAM_TOKEN}"/sendMessage \
        -d chat_id="${CHANNEL_ID}" \
        -d text="$1" \
        -d "parse_mode=html" \
        -d "disable_web_page_preview=true"
}

send_file() {
    curl -s -X POST \
        https://api.telegram.org/bot"{$TELEGRAM_TOKEN}"/sendDocument \
        -F chat_id="${CHANNEL_ID}" \
        -F document=@"$1" \
        -F caption="$2" \
        -F "parse_mode=html" \
        -F "disable_web_page_preview=true"
}

send_msg "
<b>Building New Kernel ...</b>
<code>$(date +"%A, %d %b %Y, %H:%M:%S")</code>
<b>======================================</b>
<b>Device : </b><code>$DEVICE</code>
<b>Status : </b><code>$TYPE</code>
<b>Codename : </b><code>$CODENAME</code>
<b>On Branch : </b><code>$BRANCH</code>
<b>Last Commit : </b><code>$COMMIT</code>
<b>======================================</b>"

# Start Count
BUILD_START=$(date +"%s")

# Compile
# Setup Using ENV
if [[ "${COMPILE}" == "clang" ]]; then
    make O=out ARCH=arm64 "$DEFCONFIG"
    make -j$(nproc --all) O=out \
                ARCH=arm64 \
                SUBARCH=arm64 \
                LD_LIBRARY_PATH="${CLANG_DIR}/lib:${LD_LIBRARY_PATH}" \
                CC=clang \
                AR=llvm-ar \
                NM=llvm-nm \
                LD=ld.lld \
                STRIP=llvm-strip \
                OBJCOPY=llvm-objcopy \
                OBJDUMP=llvm-objdump \
                CLANG_TRIPLE=aarch64-linux-gnu- \
                CROSS_COMPILE=aarch64-linux-gnu- \
                CROSS_COMPILE_ARM32=arm-linux-gnueabi-
elif [[ "${COMPILE}" == "llvm" ]]; then
    make O=out ARCH=arm64 "$DEFCONFIG"
    make -j$(nproc --all) O=out \
                ARCH=arm64 \
                SUBARCH=arm64 \
                LD_LIBRARY_PATH="${CLANG_DIR}/lib:${LD_LIBRARY_PATH}" \
                CC=clang \
                CROSS_COMPILE=aarch64-linux-gnu- \
                CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
                CLANG_TRIPLE=aarch64-linux-gnu- \
                LD=${PrefixDir}ld.lld \
                AR=${PrefixDir}llvm-ar \
                NM=${PrefixDir}llvm-nm \
                AS=${PrefixDir}llvm-as \
                STRIP=${PrefixDir}llvm-strip \
                OBJCOPY=${PrefixDir}llvm-objcopy \
                OBJDUMP=${PrefixDir}llvm-objdump \
                READELF=${PrefixDir}llvm-readelf \
                HOSTAR=${PrefixDir}llvm-ar \
                HOSTAS=${PrefixDir}llvm-as \
                HOSTLD=${PrefixDir}ld.lld
elif [[ "${COMPILE}" == "gcc" ]]; then
    export PATH="$KERNEL_DIR/arm64/bin:$KERNEL_DIR/arm32/bin:$PATH"
    export KBUILD_COMPILER_STRING="$("$GCC_DIR"/bin/aarch64-elf-gcc --version | head -n 1)"

    make O=out ARCH=arm64 "$DEFCONFIG"
    make -j$(nproc --all) O=out \
                ARCH=arm64 \
                SUBARCH=arm64 \
                CROSS_COMPILE_ARM32=arm-eabi- \
                CROSS_COMPILE=aarch64-elf- \
                LD=aarch64-elf-ld.lld \
                AR=llvm-ar \
                NM=llvm-nm \
                OBJCOPY=llvm-objcopy
fi

# If build error
if ! [ -a "$KERNEL_IMG" ]; then
  send_msg "<b>Failed building kernel for <code>$DEVICE</code> Please fix it...!</b>"
  exit 1
fi

# End Count and Calculate Total Build Time
BUILD_END=$(date +"%s")
DIFF=$(( BUILD_END - BUILD_START ))

# Linux version
LINUX_VERSION=$(cat < out/.config | grep Linux/arm64 | cut -d " " -f3)

# Make zip
UseDtb=y  # set to 'n' if not used
UseDtbo=y # set to 'n' if not used
BASE_DTB_NAME="sm8150-v2"

cp -r "$KERNEL_IMG" "$AK3_DIR"/

if [[ "$UseDtbo" == "y" ]]; then
    cp -r "$KERNEL_DTBO" "$AK3_DIR"/
fi

if [[ "$UseDtb" == "y" ]]; then
        ( find "$KERNEL_DTB" -name "*.dtb" -exec cat {} + > $AK3_DIR/dtb )
        [[ ! -e "$AK3_DIR/dtb" ]] && [[ ! -z "$BASE_DTB_NAME" ]] && cp $KERNEL_DTB/$BASE_DTB_NAME $AK3_DIR/dtb
fi

cd "$AK3_DIR" || exit

if [[ "$TYPE" ]]; then
    ZIP_NAME2=["$ZIP_DATE"]["$TYPE"]"Weeaboo"-"$ZIP_DATE2".zip
    zip -r9 "$ZIP_NAME2" ./*
else
    ZIP_NAME2=["$ZIP_DATE"]["$TYPE"]"Weeaboo"-"$ZIP_DATE2".zip
    zip -r9 "$ZIP_NAME2" ./*
fi

cd "$KERNEL_DIR" || exit

send_file "$AK3_DIR/$ZIP_NAME2" "
<b>#$DEVICE</b>
<b>============================</b>
<b>Linux Version : </b> <code>$LINUX_VERSION</code>
<b>md5 : </b><code>$(md5sum "$AK3_DIR/$ZIP_NAME2" | cut -d' ' -f1)</code>
<b>============================</b>"

send_msg "
<b>Building Finished!</b>
<code>$(date +"%A, %d %b %Y, %H:%M:%S")</code>
<b>======================================</b>
<b>Build Took : </b><code>$(("$DIFF" / 60)) Minute, $(("$DIFF" % 60)) Second</code>
<b>Build Using :</b> <code>$CPU $CORES thread</code>
<b>Compiler : </b><code>$KBUILD_COMPILER_STRING</code>
<b>======================================</b>"