#!/usr/bin/env bash

# Function to show an informational message
msg() {
    echo -e "\e[1;32m$*\e[0m"
}

err() {
    echo -e "\e[1;41m$*\e[0m"
}

# Clone source
git clone https://github.com/ClangBuiltLinux/tc-build clang
mv github-release clang
cd clang

# Install dependency
bash ci.sh deps

# Set a directory
DIR="$(pwd ...)"

# Setup your build
if [[ "$1" == "latest" ]]; then
    # This build with latest LLVM's
    BRANCH="main"
    TLINK="WeebX-Clang-latest-link.txt"
    BDATE="latest-build-date.txt"
elif [[ "$1" == "14" ]]; then
    # This build with 'release/14.x' LLVM's branch ( Clang 14.x )
    BRANCH="release/14.x"
    TLINK="WeebX-Clang-14-link.txt"
    BDATE="14-build-date.txt"
elif [[ "$1" == "gr" ]]; then
    # This Build with Good Revision of latest LLVM's
    TLINK="WeebX-Clang-gr-link.txt"
    BDATE="gr-build-date.txt"
    GRTAG="-GR"
    GRBUILD="y"
fi

# Build LLVM
if [[ "${GRBUILD}" == "y" ]]; then
    msg "Building LLVM..."
    ./build-llvm.py \
        --clang-vendor "WeebX" \
        --defines "LLVM_PARALLEL_COMPILE_JOBS=$(nproc) LLVM_PARALLEL_LINK_JOBS=$(nproc) CMAKE_C_FLAGS=-O3 CMAKE_CXX_FLAGS=-O3" \
        --projects "clang;lld;polly" \
        --targets "ARM;AArch64;X86" \
        --use-good-revision \
        --incremental \
        --no-ccache
else
    msg "Building LLVM..."
    ./build-llvm.py \
    	--clang-vendor "WeebX" \
    	--defines "LLVM_PARALLEL_COMPILE_JOBS=$(nproc) LLVM_PARALLEL_LINK_JOBS=$(nproc) CMAKE_C_FLAGS=-O3 CMAKE_CXX_FLAGS=-O3" \
    	--projects "clang;lld;polly" \
    	--targets "ARM;AArch64;X86" \
    	--shallow-clone \
    	--incremental \
    	--no-ccache \
        --branch "${BRANCH}"
fi

# Check if the final clang binary exists or not.
[ ! -f install/bin/clang-1* ] && {
	err "Building LLVM failed ! Kindly check errors !!"
	exit 1
}

# Build binutils
msg "Building binutils..."
./build-binutils.py --targets arm aarch64 x86_64

# Remove unused products
rm -fr install/include
rm -f install/lib/*.a install/lib/*.la

# Strip remaining products
for f in $(find install -type f -exec file {} \; | grep 'not stripped' | awk '{print $1}'); do
	strip -s "${f: : -1}"
done

# Set executable rpaths so setting LD_LIBRARY_PATH isn't necessary
for bin in $(find install -mindepth 2 -maxdepth 3 -type f -exec file {} \; | grep 'ELF .* interpreter' | awk '{print $1}'); do
	# Remove last character from file output (':')
	bin="${bin: : -1}"

	echo "$bin"
	patchelf --set-rpath "$DIR/../lib" "$bin"
done

# Release Info
pushd llvm-project || exit
llvm_commit="$(git rev-parse HEAD)"
short_llvm_commit="$(cut -c-8 <<< "$llvm_commit")"
popd || exit

llvm_commit_url="https://github.com/llvm/llvm-project/commit/$short_llvm_commit"
binutils_ver="$(ls | grep "^binutils-" | sed "s/binutils-//g")"
clang_version="$(install/bin/clang --version | head -n1 | cut -d' ' -f4)"
TagsDate="$(TZ=Asia/Jakarta date +"%Y%m%d")"
ZipName="WeebX-Clang-$clang_version-${TagsDate}.tar.gz"
Tags="WeebX-Clang-$clang_version"${GRTAG}"-${TagsDate}-release"
ClangLink="https://github.com/XSans0/WeebX-Clang/releases/download/${Tags}/${ZipName}"

# Git Config
git config --global user.name "XSans0"
git config --global user.email "xsansdroid@gmail.com"

pushd $(pwd)/install || exit
echo "# Quick Info" >> README.md
echo "* Build Date : $(TZ=Asia/Jakarta date +"%Y-%m-%d")" >> README.md
echo "* Clang Version : $clang_version" >> README.md
echo "* Binutils Version : $binutils_ver" >> README.md
echo "* Compiled Based : $llvm_commit_url" >> README.md
tar -czvf ../"$ZipName" *
popd || exit

# Clone Repo
git clone "https://XSans0:$GIT_TOKEN@github.com/XSans0/WeebX-Clang.git" rel_repo
pushd rel_repo || exit
echo "${ClangLink}" > "${TLINK}"
echo "$(TZ=Asia/Jakarta date +"%Y-%m-%d")" > "${BDATE}"
git add .
git commit -asm "WeebX-Clang: ${TagsDate}"
git tag ${Tags} -m "${Tags}"
git push -f origin main
git push -f origin ${Tags}
popd || exit

chmod +x github-release
./github-release release \
    --security-token "$GIT_TOKEN" \
    --user XSans0 \
    --repo WeebX-Clang \
    --tag ${Tags} \
    --name "${Tags}" \
    --description "$(cat install/README.md)"

fail="n"
./github-release upload \
    --security-token "$GIT_TOKEN" \
    --user XSans0 \
    --repo WeebX-Clang \
    --tag ${Tags} \
    --name "$ZipName" \
    --file "$ZipName" || fail="y"

TotalTry="0"
UploadAgain()
{
    GetRelease="$(./github-release upload \
        --security-token "$GIT_TOKEN" \
        --user XSans0 \
        --repo WeebX-Clang \
        --tag ${Tags} \
        --name "$ZipName" \
        --file "$ZipName")"
    [[ -z "$GetRelease" ]] && fail="n"
    [[ "$GetRelease" == *"already_exists"* ]] && fail="n"
    TotalTry=$(($TotalTry+1))
    if [ "$fail" == "y" ];then
        if [ "$TotalTry" != "5" ];then
            sleep 10s
            UploadAgain
        fi
    fi
}
if [ "$fail" == "y" ];then
    sleep 10s
    UploadAgain
fi

if [ "$fail" == "y" ];then
    pushd $(pwd)/rel_repo || exit
    git push -d origin ${Tags}
    git reset --hard HEAD~1
    git push -f origin main
    popd || exit
fi